#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

# IDL enhanced REPL
# idl_erep

require 'open3'
require 'readline'

profile = '~/.idl_profile'
idlbin = 'idl'
prompt = 'IDL-EREP> '
idlhist  = '~/.idl/idl/rbuf/history'
homehist = '~/.idl_history'
currhist = './.idl_history'
histlim  = 10000
defcomplist = ['help', 'plot', 'print', 'window']
compfuncs = ["defcomplist", "get_dir_elems", "get_dir_pros"]

stderr_blink_ptrn  = /^% Execution halted at.*$/
stdout_blue_ptrn   = //
stdout_green_ptrn  = //
stdout_yellow_ptrn = //

def get_dir_elems()
  Dir::entries(Dir::pwd)
end

def get_dir_pros()
  pros = Dir::entries(Dir::pwd).select do |i|
    i =~ /\.pro$/
  end
  pros.map! do |i|
    i.gsub(/\.pro$/, '')
  end
  pros
end

def extract_idl_command(line)
  line.gsub(/ <!--.*-->$/, '')
end

def read_hist_from_file(file)
  res = []
  if File.exist?(File.expand_path(file)) then
    open(File.expand_path(file)) do |f|
      while l = f.gets
        res << extract_idl_command(l.chomp)
      end
    end
  end
  res.reverse
end

def readline_hist_management(prompt)
  line = Readline.readline(prompt, false)
  Readline::HISTORY << line.chomp
  return nil if line.nil?
  if line =~ /^\s*$/ then
    Readline::HISTORY.pop
  end
  line
end

comp = proc do |s|
  complist = []
  compfuncs.map do |f|
    complist += eval(f)
  end
  complist.grep(/^#{Regexp.escape(s)}/)
end

Readline.completion_append_character = " "
Readline.completion_proc = comp

# main routine

# initialize

# read profile
if File.exist?(File.expand_path(profile)) then
  eval File.read File.expand_path(profile)
end

read_hist_from_file(idlhist).map do |h|
  Readline::HISTORY << h
end

if File.exist?(File.expand_path(currhist)) then
  open(File.expand_path(currhist)) do |f|
    while l = f.gets
      Readline::HISTORY << l.chomp
    end
  end
  histfile = currhist
elsif File.exist?(File.expand_path(homehist)) then
  open(File.expand_path(homehist)) do |f|
    while l = f.gets
      Readline::HISTORY << l.chomp
    end
  end
  histfile = homehist
else
  open(File.expand_path(homehist), 'w').close()
  histfile = homehist
end

Open3.popen3(idlbin) do |i, o, e, w|

  # stdout
  Thread.new do
    o.each do |line|
      case line
      when stdout_blue_ptrn
        puts "\033[2K\r\033[4m" + line + "\033[0m"
      when stdout_green_ptrn
        puts "\033[2K\r\033[2m" + line + "\033[0m"
      when stdout_yellow_ptrn
        puts "\033[2K\r\033[3m" + line + "\033[0m"
      else
        puts "\033[2K\r" + line
      end
      print prompt
    end
  end

  # stderr
  Thread.new do
    e.each do |line|
      if line =~ stderr_blink_ptrn then
        print "\033[2K\r\033[31m\033[1m\033[6m" + line + "\033[0m"
      else
        print "\033[2K\r\033[31m" + line + "\033[0m"
      end
      print prompt
    end
  end

  # main loop
  while input = readline_hist_management(prompt)
    i.puts input

    break if input =~ /^\s*exit\s*$/
  end

  i.close

  # status
  puts w.value

end

# finalize
open(File.expand_path(histfile), 'w') do |f|
  f.puts Readline::HISTORY.to_a.reverse.take(histlim).reverse
end


